// Generated by CoffeeScript 1.3.3

/*
    Author:         Amsul - http://amsul.ca
    Version:        0.3.0
    Created on:     19/08/2012
    Last Updated:   20 August, 2012
*/


/*jshint debug: true, browser: true, devel: true, curly: false, forin: false, nonew: true, plusplus: false
*/


/*
==========================================================================

    Load
    All
    The
    Things
    .js

==========================================================================
*/


(function() {
  var Load;

  Load = (function() {
    var self;

    function Load() {}

    self = {};

    /*
        Load all the things!
        ========================================================================
    */


    Load.allTheThings = function(options) {
      var thingType, _i, _len, _ref;
      if (!options.thingsToLoad) {
        return Load;
      }
      Load.elemProgress = options.progressId ? document.getElementById(options.progressId) : null;
      Load.elemThings = options.thingsId ? document.getElementById(options.thingsId) : null;
      Load.elemThingsLoaded = options.thingsLoadedId ? document.getElementById(options.thingsLoadedId) : null;
      _ref = options.thingsToLoad;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        thingType = _ref[_i];
        self.loadThings(thingType);
      }
      self.loadingStarted();
      return Load;
    };

    /*
        Load things based on type of things
        ========================================================================
    */


    self.loadThings = function(type) {
      var selector, thing, things, _i, _len, _ref;
      things = {};
      selector = (function() {
        switch (type) {
          case 'images':
            return 'img';
          case 'fonts':
            return 'font';
          case 'css':
            return 'link';
          case 'js':
            return 'script';
          case 'doc':
            return 'section';
          default:
            throw 'Thing type \'' + type + '\' is unknown';
        }
      })();
      things.all = document.querySelectorAll(selector);
      things.count = 0;
      things.filter = function(thing) {
        if (thing.dataset && thing.dataset.src) {
          things.load(thing);
        }
        return things;
      };
      things.load = function(thing) {
        var font;
        things.count += 1;
        if (type === 'fonts') {
          font = new Font();
          self.addHandlers(font, type);
          font.fontFamily = thing.dataset.family;
          font.src = thing.dataset.src;
        } else {
          self.addHandlers(thing, type);
          if (type === 'css') {
            thing.href = thing.dataset.src;
          } else {
            thing.src = thing.dataset.src;
          }
        }
        return things;
      };
      _ref = things.all;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        thing = _ref[_i];
        things.filter(thing);
      }
      self.THINGS += things.count;
      return self;
    };

    /*
        Bind and unbind some events
        ========================================================================
    */


    self.bind = function(thing, listener, handler) {
      thing.addEventListener(listener, handler, false);
      return self;
    };

    self.unbind = function(thing, listener, handler) {
      thing.removeEventListener(listener, handler);
      return self;
    };

    /*
        Add and remove handlers
        ========================================================================
    */


    self.addHandlers = function(thing, type) {
      var onError, onLoad, request;
      if (type === 'images' || type === 'css' || type === 'js') {
        self.commonHandlers(thing, type);
      } else if (type === 'fonts') {
        onLoad = function() {
          self.removeHandlers(thing, type).thingLoaded();
        };
        onError = function() {
          self.removeHandlers(thing, type);
          console.log('onError', thing, type);
        };
        thing.onload = onLoad;
        thing.onerror = onError;
      } else if (type === 'doc') {
        request = new XMLHttpRequest();
        request.onload = function(e) {
          self.removeHandlers(request, type).thingLoaded(thing, type, request.responseText);
        };
        request.onreadystatechange = function(e) {
          if (request.readyState === 4 && request.status === 200) {
            self.removeHandlers(request, type).thingLoaded(thing, type, request.responseText);
          }
        };
        request.onerror = function() {
          self.removeHandlers(request, type);
          console.log('onerror', thing, type);
        };
        request.open('GET', thing.dataset.src, true);
        request.send();
      } else {
        console.log('no add handler', thing, type);
      }
      return self;
    };

    self.removeHandlers = function(thing, type) {
      if (type === 'images' || type === 'css' || type === 'js') {
        self.unbind(thing, 'load', thing.onLoad).unbind(thing, 'readyStateChange', thing.onReadyStateChange).unbind(thing, 'error', thing.onError);
      } else if (type === 'fonts') {
        thing.onload = function() {};
        thing.onerror = function() {};
      } else if (type === 'doc') {
        thing.onload = function() {};
        thing.onreadystatechange = function() {};
        thing.onerror = function() {};
      } else {
        console.log('no remove handler', thing, type);
      }
      return self;
    };

    self.commonHandlers = function(thing, type) {
      var onError, onLoad, onReadyStateChange;
      onLoad = function(e) {
        self.removeHandlers(thing, type).thingLoaded();
      };
      onReadyStateChange = function(e) {
        if (thing.readyState === 'complete') {
          self.removeHandlers(thing, type).thingLoaded();
        }
        console.log('onReadyStateChange', e);
      };
      onError = function(e) {
        self.removeHandlers(thing, type);
        console.log('onError', e);
      };
      self.bind(thing, 'load', onLoad).bind(thing, 'readyStateChange', onReadyStateChange).bind(thing, 'error', onError);
      return self;
    };

    /*
        Update the progress as things load
        ========================================================================
    */


    self.thingLoaded = function(thing, type, content) {
      self.THINGS_LOADED += 1;
      self.PROGRESS = self.THINGS_LOADED / self.THINGS * 100;
      if (Load.elemProgress) {
        Load.elemProgress.innerHTML = self.PROGRESS;
      }
      if (Load.elemThingsLoaded) {
        Load.elemThingsLoaded.innerHTML = self.THINGS_LOADED;
      }
      if (type === 'doc') {
        thing.innerHTML = content;
      }
      return self;
    };

    /*
        After all the things have started loading
        ========================================================================
    */


    self.loadingStarted = function() {
      if (Load.elemThings) {
        Load.elemThings.innerHTML = self.THINGS;
      }
      if (Load.elemThingsLoaded) {
        Load.elemThingsLoaded.innerHTML = self.THINGS_LOADED;
      }
      if (Load.elemProgress) {
        Load.elemProgress.innerHTML = self.PROGRESS;
      }
      return self;
    };

    /*
        Intialize the loading
        ========================================================================
    */


    self.initialize = (function() {
      self.PROGRESS = 0;
      self.THINGS = 0;
      self.THINGS_LOADED = 0;
      window.Load = Load;
      return self;
    })();

    return Load;

  })();

  /*
  APP functionality goes here
  */


  Load.allTheThings({
    'thingsToLoad': ['images', 'fonts', 'css', 'js', 'doc'],
    'progressId': 'progress',
    'thingsId': 'things',
    'thingsLoadedId': 'things_loaded'
  });

}).call(this);
