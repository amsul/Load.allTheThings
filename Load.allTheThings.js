// Generated by CoffeeScript 1.3.3

/*
    Author:         Amsul - http://amsul.ca
    Version:        0.2.0
    Created on:     19/08/2012
    Last Updated:   19 August, 2012
*/


/*jshint debug: true, browser: true, devel: true, curly: false, forin: false, nonew: true, plusplus: false
*/


/*
==========================================================================

    Load
    All
    The
    Things
    .js

==========================================================================
*/


(function() {
  var Load;

  Load = (function() {
    var self;

    function Load() {}

    self = {};

    /* Easy access for shizzle
    */


    self.progress = 0;

    self.things = 0;

    self.thingsLoaded = 0;

    /*
        Load all the things!
        ========================================================================
    */


    Load.allTheThings = function(options) {
      Load.elemProgress = options.progressId ? document.getElementById(options.progressId) : null;
      Load.elemThings = options.thingsId ? document.getElementById(options.thingsId) : null;
      Load.elemThingsLoaded = options.thingsLoadedId ? document.getElementById(options.thingsLoadedId) : null;
      self.loadImages().loadFonts().loadingStarted();
      /*
              ## if it's an object
              if things and typeof things is 'object' and Object.prototype.toString.call( things ) is '[object Object]'
                  
                  ## try loading the things
                  self.tryLoading things
      
              ## otherwise just return
              else
                  console.log( things, 'not object' )
                  return Load
      */

      return Load;
    };

    /*
        Load all the images with `data-src`
        ========================================================================
    */


    self.loadImages = function() {
      var image, images, _i, _len, _ref;
      images = {};
      images.all = document.querySelectorAll('img');
      images.count = 0;
      images.filter = function(image) {
        if (image.dataset && image.dataset.src) {
          images.load(image);
        }
        return images;
      };
      images.load = function(image) {
        var onError, onLoad, onReadyStateChange, removeHandlers;
        onLoad = function(e) {
          removeHandlers();
          self.thingLoaded();
        };
        onReadyStateChange = function(e) {
          if (image.readyState === 'complete') {
            removeHandlers();
          }
          console.log('onReadyStateChange', e);
        };
        onError = function(e) {
          removeHandlers();
          console.log('onError', e);
        };
        removeHandlers = function() {
          self.unbind(image, 'load', onLoad).unbind(image, 'readyStateChange', onReadyStateChange).unbind(image, 'error', onError);
        };
        images.count += 1;
        self.bind(image, 'load', onLoad).bind(image, 'readyStateChange', onReadyStateChange).bind(image, 'error', onError);
        image.src = image.dataset.src;
        return images;
      };
      _ref = images.all;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        image = _ref[_i];
        images.filter(image);
      }
      self.things += images.count;
      return self;
    };

    /*
        Load all the fonts with `data-src`
        ========================================================================
    */


    self.loadFonts = function() {
      var font, fonts, _i, _len, _ref;
      fonts = {};
      fonts.all = document.querySelectorAll('font');
      fonts.count = 0;
      fonts.filter = function(font) {
        if (font.dataset && font.dataset.src) {
          fonts.load(font);
        }
        return fonts;
      };
      fonts.load = function(font) {
        var newFont, onError, onLoad, removeHandlers;
        newFont = new Font();
        onLoad = function(e) {
          removeHandlers();
          self.thingLoaded();
          console.log('here', e, newFont);
        };
        onError = function(e) {
          removeHandlers();
          console.log('onError', e);
        };
        removeHandlers = function() {
          newFont.onload = function() {};
          newFont.onerror = function() {};
        };
        fonts.count += 1;
        newFont.onload = onLoad;
        newFont.onerror = onError;
        newFont.fontFamily = font.dataset.family;
        newFont.src = font.dataset.src;
        font.style.fontFamily = font.dataset.family.replace(/\ /g, '\\ ');
        console.dir(font);
        return fonts;
      };
      _ref = fonts.all;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        font = _ref[_i];
        fonts.filter(font);
      }
      self.things += fonts.count;
      return self;
    };

    /*
        Bind and unbind some events
        ========================================================================
    */


    self.bind = function(thing, listener, handler) {
      thing.addEventListener(listener, handler, false);
      return self;
    };

    self.unbind = function(thing, listener, handler) {
      thing.removeEventListener(listener, handler);
      return self;
    };

    /*
        Update the progress as things load
        ========================================================================
    */


    self.thingLoaded = function() {
      self.thingsLoaded += 1;
      self.progress = self.thingsLoaded / self.things * 100;
      if (Load.elemProgress) {
        Load.elemProgress.innerHTML = self.progress;
      }
      if (Load.elemThingsLoaded) {
        Load.elemThingsLoaded.innerHTML = self.thingsLoaded;
      }
      return self;
    };

    /*
        After all the things have started loading
        ========================================================================
    */


    self.loadingStarted = function() {
      if (Load.elemThings) {
        Load.elemThings.innerHTML = self.things;
      }
      if (Load.elemThingsLoaded) {
        Load.elemThingsLoaded.innerHTML = self.thingsLoaded;
      }
      if (Load.elemProgress) {
        Load.elemProgress.innerHTML = self.progress;
      }
      return self;
    };

    /*
        Try loading the things passed
        ======================================================================== ## #
    
        self.tryLoading = ( things ) ->
    
            doTrial = ( type, thing ) ->
    
                try
                    Load.get[ type ] thing
                
                catch error
                    #console.log error, ' .. warning bro. there\'s no \'' + type + '\' loader'
    
    
            ## try loading the thing based on type
            doTrial type, thing for own type, thing of things
    
            return self
    
        #checkThings
    
    
    
        ## #
        Load in things
        ======================================================================== ## #
    
        Load.get =
    
            ## load some images
            images: ( thing ) ->
    
    
                ## if the thing is an array
    
                if thing and typeof thing is 'object' and Object.prototype.toString.call thing is '[object Array]'
                    console.log 'this is an array', thing
    
    
                ## if the thing is a string
    
                else if typeof thing is 'string'
                    self.loadImage thing
    
    
                else console.log 'some other thing', thing
    
        #get
    
    
    
        ## #
        Load images
        ======================================================================== ## #
    
        self.loadImage = ( url ) ->
    
            console.log 'url', url
    
            return self
    */


    /*
        Intialize the loading
        ========================================================================
    */


    Load.initialize = (function() {
      window.Load = Load;
      Load.allTheThings({
        'asdf': ['asdfasdf', 333, 'lol'],
        'images': 'homer.png',
        'fonts': ['asfd.ttf', 'loler.woff'],
        'progressId': 'progress',
        'thingsId': 'things',
        'thingsLoadedId': 'things_loaded'
      });
      return Load;
    })();

    return Load;

  })();

  /*
  `
  / * ==========================================================================
  
      APP stuff begins
  
  ========================================================================== * /
  
  (function($, window, document, undefined) {
  
      'use strict';
  
      var
  
          / *
              Globals
          ======================================================================== * /
  
          $window = $( window ),
          $APP = $( '#APP' ),
  
  
          / *
              APP
          ======================================================================== * /
  
          APP = (function app() {
  
              var self = {}
  
  
  
              / *
                  Do stuff with the app
              ======================================================================== * /
  
              app.do_something = function() {
  
                  
  
                  return app
              }
  
  
  
  
  
              / *
                  Start up the app
              ========================================================================== * /
  
              self.start = function() {
  
  
  
                  return self
              } // start
  
  
  
              return app
          })() // APP
  
  
  
  
  
  
      / *
          Start 'er up!
      ======================================================================== * /
  
      APP.start()
  
  
  })(jQuery, window, document)`
  */


}).call(this);
