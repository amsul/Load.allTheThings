{"note":"Don't delete this file! It's used internally to help with page regeneration.","google":"UA-34741130-1","name":"Load.allthethings","body":"![Load.allTheThings](http://i.imgur.com/PdbF7.png)\r\n\r\nLoad.allTheThings\r\n=================\r\n\r\nCurrent build: _beta_ v0.7.0 – 11 September, 2012\r\n\r\nA simple JavaScript library to load resources as they are needed on your page with just one simple invocation:\r\n\r\n```\r\nLoad.allTheThings()\r\n```\r\n\r\n\r\n<br>\r\n\r\n### Things you can load\r\n\r\n- <big>**Images**</big> ([more info](#images))\r\n- <big>**Fonts**</big> ([more info](#fonts))\r\n- <big>**Stylesheets**</big> ([more info](#stylesheets))\r\n- <big>**Scripts**</big> ([more info](#scripts))\r\n- <big>**HTML**</big> ([more info](#html))\r\n- <big>**JSON**</big> ([more info](#json))\r\n\r\n\r\n<br>\r\n#### Options\r\n\r\nThere are a few options available to be passed into your loader. [Read the API](#the-api) for more details on how to use.\r\n\r\n```\r\noptions = {\r\n\tthingsToLoad: [ <list_of_things> ],\r\n\twithin: <css_selector>,\r\n\tprogressId: <element_ID>,\r\n\tprogressBarID: <element_ID>,\r\n\tthingsId: <element_ID>,\r\n\tthingsLoadedId: <element_ID>,\r\n\tonError: <function>,\r\n\tonLoad: <function>,\r\n\tonComplete: <function>\r\n}\r\n\r\nLoad.allTheThings( options )\r\n```\r\n\r\n\r\n\r\n\r\n\r\n<br>\r\n## The Markup\r\n\r\n\r\n### Images\r\n\r\n\r\nTo have any image preload, simply change it's `src` to `data-src`. For example:\r\n\r\n```\r\n<img src=\"http://www.google.com/images/srpr/logo3w.png\">\r\n```\r\n\r\nBecomes:\r\n\r\n```\r\n<img data-src=\"http://www.google.com/images/srpr/logo3w.png\">\r\n```\r\n\r\n<br>\r\n### Fonts\r\n\r\nTo fetch fonts, use the `font` element as follows:\r\n\r\n```\r\n<font data-family=\"My Family Name\" data-src=\"media/myfont.ttf\"></font>\r\n```\r\n\r\nBoth the `data-family` and `data-src` are required attributes.\r\n\r\nOnce the font has loaded, all elements targeted with your CSS to have `font-family: \"My Family Name\"` will have your typeface.\r\n\r\n\r\n<sub>__PS:__ Yes, the `font` element has deprecated with HTML5 - but all browsers support it and that's why it's perfect (less elements to traverse through).</sub>\r\n\r\n\r\n<br>\r\n### Stylesheets\r\n\r\nLoading stylesheets is similar to loading images. Just change the `href` to `data-src`. Example:\r\n\r\n```\r\n<link data-src=\"http://html5boilerplate.com/css/_normalize.css\">\r\n```\r\n\r\nWhen the stylesheet is done loading, it is immediately applied to the page.\r\n\r\n\r\n<br>\r\n### Scripts\r\n\r\nJavaScript files can also be loaded similarly. Example:\r\n\r\n<pre>\r\n&lt;script data-src=\"http://code.jquery.com/jquery-1.8.0.js\"&gt;&lt;/script&gt;\r\n</pre>\r\n\r\nThe script is immediately invoked once it is loaded.\r\n\r\n\r\n<br>\r\n### HTML\r\n\r\nTo load HTML, specify a `data-src` to a `section` element where you want the content to be printed to. Example:\r\n\r\n```\r\n<section data-src=\"media/ajaxed_page.htm\"></section>\r\n```\r\n\r\nOnce the page has loaded, it will be inserted into this `section` element.\r\n\r\n\r\n<br>\r\n### JSON\r\n\r\nJSON data can be loaded through the `code` element. Example:\r\n\r\n```\r\n<code data-name=\"myJsonData\" data-src=\"media/data.json\"></code>\r\n```\r\n\r\nBoth the `data-name` and `data-src` are required attributes.\r\n\r\nOnce the data has loaded, you can use the `Load.getCached` method to retrieve this data depending on the `data-name` you provided:\r\n\r\n```\r\nLoad.getCached( 'myJsonData' )    // outputs your JSON data\r\n```\r\n\r\n<br><br>\r\n\r\n===\r\n\r\n\r\n<br>\r\n## The API\r\n\r\n### options.thingsToLoad\r\n\r\nAn array of things you would like to load.\r\n\r\n```\r\nthingsToLoad: [ 'images', 'fonts', 'css', 'js', 'html', 'data' ]\r\n```\r\n\r\nBy default, it will load all of the things. You can pick and choose the things you want to load and [markup your document accordingly](#Markup).\r\n\r\nThe `data` thing is for fetching JSON data. Once the loader has completed, a `Load.getCached` method is available to retrieve this stored JSON. More on this in the [JSON](#JSON) section.\r\n\r\n\r\n<br>\r\n### options.within\r\n\r\nYou can give context to your search of things to load with a CSS selector. By default, it will search the entire document. Example:\r\n\r\n```\r\nwithin: '#content'\r\n\r\n// or\r\nwithin: '.preload'\r\n\r\n// or\r\nwithin: 'section'\r\n```\r\n\r\n<br>\r\n### options.progressId\r\n\r\nThe `ID` of the element that will display the loading progress in numbers. Example:\r\n\r\n<pre>\r\n&lt;!-- the html -->\r\nProgress:\r\n&lt;span id=\"progress_count\"&gt;&lt;/span&gt;%\r\n</pre>\r\n\r\n```\r\n// the javascript\r\nprogressId: 'progress_count'\r\n```\r\n\r\n<br>\r\n### options.progressBarId\r\n\r\nThe `ID` of the element that will display as a progress bar. Example:\r\n\r\n<pre>\r\n&lt;!-- the html -->\r\nProgress bar:\r\n&lt;div id=\"progress_bar\"&gt;&lt;/div&gt;\r\n</pre>\r\n\r\n```\r\n// the javascript\r\nprogressBarId: 'progress_bar'\r\n```\r\n\r\n<br>\r\n### options.thingsId\r\n\r\nThe `ID` of the element that will display the total number of things there are to load. Similar format as needed for `options.progressId`.\r\n\r\n<br>\r\n### options.thingsLoadedId\r\n\r\nThe `ID` of the element that will display a live count on the number of things that have loaded. Similar format as needed for `options.progressId`.\r\n\r\n\r\n<br>\r\n### options.onError and options.onLoad\r\n\r\n__options.onError__ is called if something goes wrong in loading any thing. __options.onLoad__ is called as each individual thing is loaded. Example:\r\n\r\n```\r\nonError: function( thing, type ) {\r\n    console.error( 'There was an error loading a thing of ' + type + '.', thing )\r\n},\r\nonLoad: function( thing, type ) {\r\n    console.log( 'Done loading a thing of ' + type + '.', thing )\r\n}\r\n```\r\n\r\n<br>\r\n### options.onComplete\r\n\r\nThis is called when the loader has finished loading all the things.\r\n\r\n```\r\noptions.onComplete = function() {\r\n    alert( 'All the things have loaded!' )\r\n}\r\n```\r\n\r\n\r\n\r\n\r\n<br><br>\r\n\r\n---\r\nThis code is (c) Amsul Naeem, 2012 – Licensed under the MIT (\"expat\" flavor) license.\r\n","tagline":"A simple JavaScript library to preload resources as they are needed"}